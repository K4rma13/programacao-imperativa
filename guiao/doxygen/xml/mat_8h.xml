<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="mat_8h" kind="file" language="C++">
    <compoundname>mat.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includedby refid="guiao1_8c" local="yes">guiao1.c</includedby>
    <includedby refid="mat_8c" local="yes">mat.c</includedby>
    <incdepgraph>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="1">
        <label>mat.h</label>
        <link refid="mat_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>mat.c</label>
        <link refid="mat_8c"/>
      </node>
      <node id="1">
        <label>mat.h</label>
        <link refid="mat_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>guiao1.c</label>
        <link refid="guiao1_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="mat_8h_1ab16153087ebb395ab290e5b9553c1cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double addition</definition>
        <argsstring>(DADOS a, DADOS b)</argsstring>
        <name>addition</name>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="10" column="8" declfile="mat.h" declline="10" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1ab9097fc1c2819dc4e8e259cbc24988b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int potencia</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>potencia</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao exponencia o segundo valor no topo da stack pelo primeiro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="12" column="5" bodyfile="mat.c" bodystart="34" bodyend="65" declfile="mat.h" declline="12" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1af5e3dd39a55bf6264b51cf6d9e596aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int add</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao adiciona os dois valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="14" column="5" bodyfile="mat.c" bodystart="73" bodyend="88" declfile="mat.h" declline="14" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1aebac5b1209e7c0f16e7d4cb03a9722ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sub</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>sub</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao subtrai o segundo valor no topo da stack pelo primeiro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="16" column="5" bodyfile="mat.c" bodystart="95" bodyend="110" declfile="mat.h" declline="16" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1ac3440da6134dbed0b4055f528bba2338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int divisao</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>divisao</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao divide o segundo valor no topo da stack pelo primeiro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="18" column="5" bodyfile="mat.c" bodystart="117" bodyend="132" declfile="mat.h" declline="18" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1a4566559094a7ee1abead04b130a5dce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mul</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>mul</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao multiplica os dois valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="20" column="5" bodyfile="mat.c" bodystart="139" bodyend="154" declfile="mat.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1af886e313002ac8c230ca64e60f1db668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int incr</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>incr</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao incrementa o valor no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="22" column="5" bodyfile="mat.c" bodystart="162" bodyend="176" declfile="mat.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1ad8c16d88523592d92cde7f83ec54c5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int decr</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>decr</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao decrementa o valor no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="24" column="5" bodyfile="mat.c" bodystart="185" bodyend="199" declfile="mat.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1a10872927e5bc4d19b7b5b0fa217592a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int module</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>module</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao calcula o resto de uma divisao inteira do segundo valor no topo da stack pelo primeiro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="26" column="5" bodyfile="mat.c" bodystart="207" bodyend="217" declfile="mat.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1a3a2a12ec5b0397929d42dea052e6cd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int and</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>and</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao calcula o &quot;and(bitwise)&quot; entre os dois valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="28" column="5" bodyfile="mat.c" bodystart="224" bodyend="234" declfile="mat.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1a9759eeeac4495ee96d8f24e7611bfeec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int or</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>or</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao calcula o &quot;or(bitwise)&quot; entre os dois valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="30" column="5" bodyfile="mat.c" bodystart="241" bodyend="251" declfile="mat.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1a25f499f2994be33325cbd0c0fb4e43fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xor</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>xor</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao calcula o &quot;xor(bitwise)&quot; entre os dois valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="32" column="5" bodyfile="mat.c" bodystart="258" bodyend="268" declfile="mat.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mat_8h_1a633f6b4e9f63180a615d44695ec78ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int not</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>not</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao calcula o &quot;not(bitwise)&quot; do valor no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mat.h" line="34" column="5" bodyfile="mat.c" bodystart="277" bodyend="285" declfile="mat.h" declline="34" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="mat_8h_1ab16153087ebb395ab290e5b9553c1cd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1ab16153087ebb395ab290e5b9553c1cd1" kindref="member">addition</ref>(<ref refid="structDADOS" kindref="compound">DADOS</ref><sp/>a,<ref refid="structDADOS" kindref="compound">DADOS</ref><sp/>b);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1ab9097fc1c2819dc4e8e259cbc24988b9" kindref="member">potencia</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1af5e3dd39a55bf6264b51cf6d9e596aa3" kindref="member">add</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1aebac5b1209e7c0f16e7d4cb03a9722ea" kindref="member">sub</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1ac3440da6134dbed0b4055f528bba2338" kindref="member">divisao</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1a4566559094a7ee1abead04b130a5dce3" kindref="member">mul</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1af886e313002ac8c230ca64e60f1db668" kindref="member">incr</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1ad8c16d88523592d92cde7f83ec54c5d6" kindref="member">decr</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1a10872927e5bc4d19b7b5b0fa217592a0" kindref="member">module</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1a3a2a12ec5b0397929d42dea052e6cd1c" kindref="member">and</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1a9759eeeac4495ee96d8f24e7611bfeec" kindref="member">or</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1a25f499f2994be33325cbd0c0fb4e43fd" kindref="member">xor</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mat_8h_1a633f6b4e9f63180a615d44695ec78ed7" kindref="member">not</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="mat.h"/>
  </compounddef>
</doxygen>
