<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includedby refid="guiao1_8c" local="yes">guiao1.c</includedby>
    <includedby refid="mat_8h" local="yes">mat.h</includedby>
    <includedby refid="stack_8c" local="yes">stack.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>mat.c</label>
        <link refid="mat_8c"/>
      </node>
      <node id="3">
        <label>mat.h</label>
        <link refid="mat_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>guiao1.c</label>
        <link refid="guiao1_8c"/>
      </node>
      <node id="5">
        <label>stack.c</label>
        <link refid="stack_8c"/>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structDADOS" prot="public">DADOS</innerclass>
    <innerclass refid="structSTCK" prot="public">STCK</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8h_1aacca6649d32984be8e1aa076bf42fe46" prot="public" static="no">
        <name>MAXSTACK</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="11" column="9" bodyfile="stack.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8h_1a09959b52f894904e21fe912c201de4c1" prot="public" static="no">
        <name>PROTO_FSTACK</name>
        <param><defname>_name</defname></param>
        <param><defname>_type</defname></param>
        <initializer>	void push_##_name(<ref refid="structSTCK" kindref="compound">STCK</ref>* stack, _type value);	\
	_type pop_##_name(<ref refid="structSTCK" kindref="compound">STCK</ref>* stack);					\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="29" column="9" bodyfile="stack.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" prot="public" static="no" strong="no">
        <type></type>
        <name>TYPE</name>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a06f714e9a671f730d047d38bd4f59edb" prot="public">
          <name>CHR</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a03789e2426cb0fa2831e1db323804f08" prot="public">
          <name>LNG</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aec41e801b43cfbec49d343c900360bf9" prot="public">
          <name>STR</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" prot="public">
          <name>DOUBLE</name>
          <initializer>=3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="14" column="1" bodyfile="stack.h" bodystart="14" bodyend="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stack_8h_1a133f3a5b355bb2095c107028dcdc38fd" prot="public" static="no">
        <type>struct <ref refid="structDADOS" kindref="compound">DADOS</ref></type>
        <definition>typedef struct DADOS DADOS</definition>
        <argsstring></argsstring>
        <name>DADOS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="22" column="6"/>
      </memberdef>
      <memberdef kind="typedef" id="stack_8h_1af9c94bf76d813977b391547f01ee1e27" prot="public" static="no">
        <type>struct <ref refid="structSTCK" kindref="compound">STCK</ref></type>
        <definition>typedef struct STCK STCK</definition>
        <argsstring></argsstring>
        <name>STCK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="27" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1aee09561e0f65dd8f32359f3ce910ae5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_LNG</definition>
        <argsstring>(STCK *stack, long int value)</argsstring>
        <name>push_LNG</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Esta função da push a uma variavel do tipo LNG *. </para>
        </briefdescription>
        <detaileddescription>
<para>*<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack *</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a colocado no topo da stack <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="33" column="6" bodyfile="stack.c" bodystart="17" bodyend="17" declfile="stack.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a2d335f43a2ee3bc3365a0b57428b2f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int pop_LNG</definition>
        <argsstring>(STCK *stack)</argsstring>
        <name>pop_LNG</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Esta função da pop a uma variavel do tipo LNG *. </para>
        </briefdescription>
        <detaileddescription>
<para>*<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack * </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O valor no topo da stack <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="33" column="35" bodyfile="stack.c" bodystart="17" bodyend="17" declfile="stack.h" declline="33" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a101c9c46ae8368531d4af416cf9fe8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_CHR</definition>
        <argsstring>(STCK *stack, char value)</argsstring>
        <name>push_CHR</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Esta função da push a uma variavel do tipo CHR *. </para>
        </briefdescription>
        <detaileddescription>
<para>*<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack *</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a colocado no topo da stack <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="34" column="6" bodyfile="stack.c" bodystart="18" bodyend="18" declfile="stack.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ab6b3dad462dee835919defac7fe302da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char pop_CHR</definition>
        <argsstring>(STCK *stack)</argsstring>
        <name>pop_CHR</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Esta função da pop a uma variavel do tipo CHR *. </para>
        </briefdescription>
        <detaileddescription>
<para>*<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack * </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O valor no topo da stack <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="34" column="30" bodyfile="stack.c" bodystart="18" bodyend="18" declfile="stack.h" declline="34" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a12352ea6201aec3a1ce20a11812a9b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_STR</definition>
        <argsstring>(STCK *stack, char *value)</argsstring>
        <name>push_STR</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Esta função da push a uma variavel do tipo string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a colocado no topo da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="35" column="6" bodyfile="stack.c" bodystart="27" bodyend="32" declfile="stack.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1aa133d9fbddf9da6cc7e47d1b4f810560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pop_STR</definition>
        <argsstring>(STCK *stack)</argsstring>
        <name>pop_STR</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Esta função da pop a uma variavel do tipo string <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O valor no topo da stack <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="35" column="30" bodyfile="stack.c" bodystart="39" bodyend="43" declfile="stack.h" declline="35" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ac31322a8f3e64a94f3d9e9dbe6053502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_DOUBLE</definition>
        <argsstring>(STCK *stack, double value)</argsstring>
        <name>push_DOUBLE</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Esta função da push a uma variavel do tipo DOUBLE *. </para>
        </briefdescription>
        <detaileddescription>
<para>*<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack *</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a colocado no topo da stack <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="36" column="6" bodyfile="stack.c" bodystart="19" bodyend="19" declfile="stack.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1acea163cdcc493c9c59f5168502bb64f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pop_DOUBLE</definition>
        <argsstring>(STCK *stack)</argsstring>
        <name>pop_DOUBLE</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Esta função da pop a uma variavel do tipo DOUBLE *. </para>
        </briefdescription>
        <detaileddescription>
<para>*<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack * </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O valor no topo da stack <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="36" column="35" bodyfile="stack.c" bodystart="19" bodyend="19" declfile="stack.h" declline="36" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ac9f012eb4dc51ca67047fa45e47fe2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hastype</definition>
        <argsstring>(DADOS dado, TYPE tipo)</argsstring>
        <name>hastype</name>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>dado</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref></type>
          <declname>tipo</declname>
        </param>
        <briefdescription>
<para>Ve se o tipo do dado é o mesmo do tipo fornecido <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dado</parametername>
</parameternamelist>
<parameterdescription>
<para>O Dado a ser comparado </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tipo</parametername>
</parameternamelist>
<parameterdescription>
<para>O Tipo a ser testado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true se o dado tiver o mesmo tipo ou caso contrario false <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="38" column="6" bodyfile="stack.c" bodystart="52" bodyend="54" declfile="stack.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a91c2fe69e03b8331244324bfcac8c7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lestring</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>lestring</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao le uma string do stdin e faz push. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="40" column="5" bodyfile="stack.c" bodystart="101" bodyend="111" declfile="stack.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a3a8371bcd9e71fad357defd8e77f8434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printstack</definition>
        <argsstring>(STCK stack)</argsstring>
        <name>printstack</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref></type>
          <declname>stack</declname>
        </param>
        <briefdescription>
<para>Imprime para o stdout a stack fornecida. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="42" column="6" bodyfile="stack.c" bodystart="61" bodyend="76" declfile="stack.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a4c67bde564de81c9d7d8d65aec27bd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isdecimal</definition>
        <argsstring>(char *token)</argsstring>
        <name>isdecimal</name>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Testa se uma string tem um &apos;.&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>String a ser testada </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true se a string possuir um &apos;.&apos;, caso contrario false <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="44" column="6" bodyfile="stack.c" bodystart="84" bodyend="92" declfile="stack.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ab99d560990b64f0b33f9d1ff11fae4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int valor</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>valor</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao adiciona valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Retorna 1 </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="46" column="5" bodyfile="stack.c" bodystart="120" bodyend="123" declfile="stack.h" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a330799f36d0f454ed9d5b29bf756c3df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int valor_Double</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>valor_Double</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao adiciona valores decimais no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="48" column="5" bodyfile="stack.c" bodystart="132" bodyend="138" declfile="stack.h" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a625a986b17beb38129097bf9ac403feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int toLNG</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>toLNG</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao muda o tipo da variavel no topo da stack para LONG. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="50" column="5" bodyfile="stack.c" bodystart="169" bodyend="182" declfile="stack.h" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a596ca2d5b13b268c1714e5979ed65b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int toDouble</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>toDouble</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao muda o tipo da variavel no topo da stack para DOUBLE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="52" column="5" bodyfile="stack.c" bodystart="147" bodyend="160" declfile="stack.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a0c4d2dda9d8387985cef75414ee7a1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cpyStack</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>cpyStack</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao faz push a uma copia do valor na nºesima posicao. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="54" column="5" bodyfile="stack.c" bodystart="207" bodyend="216" declfile="stack.h" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a9ec0a1d2de19f5140e265199df8cf606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int longToCHR</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>longToCHR</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao muda o tipo da variavel no topo da stack de LONG para CHAR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="56" column="5" bodyfile="stack.c" bodystart="191" bodyend="198" declfile="stack.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a854928d7006572f68e68d51141b58fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rodar</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>rodar</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao roda os 3 elementos no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="58" column="5" bodyfile="stack.c" bodystart="225" bodyend="234" declfile="stack.h" declline="58" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a4c79ff9c81bbdc5761d03270bb82029a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int trocar</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>trocar</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao troca os 2 valores no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="60" column="5" bodyfile="stack.c" bodystart="243" bodyend="251" declfile="stack.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ab0eed3e0da6b16dfb8650f1cd824c627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int duplicar</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>duplicar</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao faz push a uma copia do valor no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="62" column="5" bodyfile="stack.c" bodystart="260" bodyend="268" declfile="stack.h" declline="62" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1af005ea1c2e5e98f020cbb8165af6d9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int removeTop</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>removeTop</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Esta funcao faz &quot;&quot;Pop&quot;&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>A stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser interpretado </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna 1 se o token for o correto se nao retorna 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="64" column="5" bodyfile="stack.c" bodystart="276" bodyend="282" declfile="stack.h" declline="64" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__STACK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__STACK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="stack_8h_1aacca6649d32984be8e1aa076bf42fe46" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXSTACK<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a06f714e9a671f730d047d38bd4f59edb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal">{<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a06f714e9a671f730d047d38bd4f59edb" kindref="member">CHR</ref><sp/>=<sp/>0,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a03789e2426cb0fa2831e1db323804f08" kindref="member">LNG</ref><sp/>=<sp/>1,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aec41e801b43cfbec49d343c900360bf9" kindref="member">STR</ref>=2,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>=3}<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structDADOS" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDADOS" kindref="compound">DADOS</ref>{</highlight></codeline>
<codeline lineno="17" refid="structDADOS_1ae9e10266fc33543efc50d1a474ccc253" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref><sp/><ref refid="structDADOS_1ae9e10266fc33543efc50d1a474ccc253" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="18" refid="structDADOS_1a6fd3fd46a4f510ab6de67d740faaa3e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structDADOS_1a6fd3fd46a4f510ab6de67d740faaa3e6" kindref="member">CHR</ref>;</highlight></codeline>
<codeline lineno="19" refid="structDADOS_1a0eb2004f87d37dba7146d7fb15d687c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structDADOS_1a0eb2004f87d37dba7146d7fb15d687c5" kindref="member">STR</ref>;</highlight></codeline>
<codeline lineno="20" refid="structDADOS_1a7ed43f8ac7af42bd57146ce46860fd20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDADOS_1a7ed43f8ac7af42bd57146ce46860fd20" kindref="member">LNG</ref>;</highlight></codeline>
<codeline lineno="21" refid="structDADOS_1ab3c8b5db467f41229e732cbf95eedd93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structDADOS_1ab3c8b5db467f41229e732cbf95eedd93" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="22" refid="stack_8h_1a133f3a5b355bb2095c107028dcdc38fd" refkind="member"><highlight class="normal">}<ref refid="stack_8h_1a133f3a5b355bb2095c107028dcdc38fd" kindref="member">DADOS</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structSTCK" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSTCK" kindref="compound">STCK</ref>{</highlight></codeline>
<codeline lineno="25" refid="structSTCK_1a17103f2db12ee943761c3da86afa0257" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDADOS" kindref="compound">DADOS</ref><sp/><ref refid="structSTCK_1a17103f2db12ee943761c3da86afa0257" kindref="member">val</ref>[<ref refid="stack_8h_1aacca6649d32984be8e1aa076bf42fe46" kindref="member">MAXSTACK</ref>];</highlight></codeline>
<codeline lineno="26" refid="structSTCK_1af6202e69c9de52d64e2121fba32b2bca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTCK_1af6202e69c9de52d64e2121fba32b2bca" kindref="member">esp</ref>;</highlight></codeline>
<codeline lineno="27" refid="stack_8h_1af9c94bf76d813977b391547f01ee1e27" refkind="member"><highlight class="normal">}<ref refid="stack_8h_1af9c94bf76d813977b391547f01ee1e27" kindref="member">STCK</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="stack_8h_1a09959b52f894904e21fe912c201de4c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROTO_FSTACK(_name,_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>push_##_name(STCK*<sp/>stack,<sp/>_type<sp/>value);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_type<sp/>pop_##_name(STCK*<sp/>stack);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="stack_8h_1a09959b52f894904e21fe912c201de4c1" kindref="member">PROTO_FSTACK</ref>(<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a03789e2426cb0fa2831e1db323804f08" kindref="member">LNG</ref>,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="stack_8h_1a09959b52f894904e21fe912c201de4c1" kindref="member">PROTO_FSTACK</ref>(<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a06f714e9a671f730d047d38bd4f59edb" kindref="member">CHR</ref>,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="stack_8h_1a09959b52f894904e21fe912c201de4c1" kindref="member">PROTO_FSTACK</ref>(<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aec41e801b43cfbec49d343c900360bf9" kindref="member">STR</ref>,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="stack_8h_1a09959b52f894904e21fe912c201de4c1" kindref="member">PROTO_FSTACK</ref>(<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ac9f012eb4dc51ca67047fa45e47fe2d5" kindref="member">hastype</ref>(<ref refid="structDADOS" kindref="compound">DADOS</ref><sp/>dado,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref><sp/>tipo);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a91c2fe69e03b8331244324bfcac8c7b5" kindref="member">lestring</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a3a8371bcd9e71fad357defd8e77f8434" kindref="member">printstack</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref><sp/>stack);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a4c67bde564de81c9d7d8d65aec27bd37" kindref="member">isdecimal</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ab99d560990b64f0b33f9d1ff11fae4ea" kindref="member">valor</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a330799f36d0f454ed9d5b29bf756c3df" kindref="member">valor_Double</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a625a986b17beb38129097bf9ac403feb" kindref="member">toLNG</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a596ca2d5b13b268c1714e5979ed65b42" kindref="member">toDouble</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a0c4d2dda9d8387985cef75414ee7a1bd" kindref="member">cpyStack</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a9ec0a1d2de19f5140e265199df8cf606" kindref="member">longToCHR</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a854928d7006572f68e68d51141b58fe0" kindref="member">rodar</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a4c79ff9c81bbdc5761d03270bb82029a" kindref="member">trocar</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ab0eed3e0da6b16dfb8650f1cd824c627" kindref="member">duplicar</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1af005ea1c2e5e98f020cbb8165af6d9d0" kindref="member">removeTop</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="stack.h"/>
  </compounddef>
</doxygen>
