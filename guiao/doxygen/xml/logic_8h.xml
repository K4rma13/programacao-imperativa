<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="logic_8h" kind="file" language="C++">
    <compoundname>logic.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includedby refid="guiao1_8c" local="yes">guiao1.c</includedby>
    <includedby refid="logic_8c" local="yes">logic.c</includedby>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="1">
        <label>logic.h</label>
        <link refid="logic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>guiao1.c</label>
        <link refid="guiao1_8c"/>
      </node>
      <node id="3">
        <label>logic.c</label>
        <link refid="logic_8c"/>
      </node>
      <node id="1">
        <label>logic.h</label>
        <link refid="logic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="logic_8h_1ac5ae4c3aa3ac6d9e6e44dcccd9e3f37d" prot="public" static="no">
        <name>OPERATION_PROTOO</name>
        <param><defname>_name</defname></param>
        <initializer>	bool OP_##_name(<ref refid="structDADOS" kindref="compound">DADOS</ref> b,<ref refid="structDADOS" kindref="compound">DADOS</ref> a);	\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="8" column="9" bodyfile="logic.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="logic_8h_1a12bff09a38738dcf96796d803002067b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OP_SMALL</definition>
        <argsstring>(DADOS b, DADOS a)</argsstring>
        <name>OP_SMALL</name>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="12" column="6" bodyfile="logic.c" bodystart="22" bodyend="22" declfile="logic.h" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1aee1c7f9e83ee61068a86b0af11b2ca87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OP_BIG</definition>
        <argsstring>(DADOS b, DADOS a)</argsstring>
        <name>OP_BIG</name>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="14" column="6" bodyfile="logic.c" bodystart="23" bodyend="23" declfile="logic.h" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1acb0eb1b374e8db86014fd756dc14baaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OP_EQUAL</definition>
        <argsstring>(DADOS b, DADOS a)</argsstring>
        <name>OP_EQUAL</name>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structDADOS" kindref="compound">DADOS</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="16" column="6" bodyfile="logic.c" bodystart="21" bodyend="21" declfile="logic.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1ad90808034d12bb9206675ca393c44c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isFalse</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>isFalse</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="18" column="5" bodyfile="logic.c" bodystart="69" bodyend="89" declfile="logic.h" declline="18" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1a410b71aa57c657afc46e689c2088a859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isEqual</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>isEqual</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="20" column="5" bodyfile="logic.c" bodystart="91" bodyend="100" declfile="logic.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1a738a6890d1461a8404eb031c24fd04d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isSmall</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>isSmall</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="22" column="5" bodyfile="logic.c" bodystart="102" bodyend="111" declfile="logic.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1aabc31e7c235c86bd90177370ec66e7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isBig</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>isBig</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="24" column="5" bodyfile="logic.c" bodystart="114" bodyend="123" declfile="logic.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1a44b1abc60f9c35e93958b66fa4d70380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ifThenElse</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>ifThenElse</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="26" column="5" bodyfile="logic.c" bodystart="125" bodyend="133" declfile="logic.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1a185849a7db34bc74c0404230e3a3b1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logicalAnd</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>logicalAnd</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="28" column="5" bodyfile="logic.c" bodystart="135" bodyend="150" declfile="logic.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1a8fac8afc7d646088b511fc0b93fd514e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logicalOr</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>logicalOr</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="30" column="5" bodyfile="logic.c" bodystart="152" bodyend="167" declfile="logic.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1af07e7691043d3b497bf5cd5e14b687cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logicalGreater</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>logicalGreater</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="32" column="5" bodyfile="logic.c" bodystart="169" bodyend="178" declfile="logic.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="logic_8h_1a6f28ee55cd5fc141581de8957675686a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logicalLess</definition>
        <argsstring>(STCK *stack, char *token)</argsstring>
        <name>logicalLess</name>
        <param>
          <type><ref refid="structSTCK" kindref="compound">STCK</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="logic.h" line="34" column="5" bodyfile="logic.c" bodystart="180" bodyend="189" declfile="logic.h" declline="34" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__LOGIC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LOGIC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="logic_8h_1ac5ae4c3aa3ac6d9e6e44dcccd9e3f37d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPERATION_PROTOO(_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>OP_##_name(DADOS<sp/>b,DADOS<sp/>a);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="logic_8h_1ac5ae4c3aa3ac6d9e6e44dcccd9e3f37d" kindref="member">OPERATION_PROTOO</ref>(SMALL)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="logic_8h_1ac5ae4c3aa3ac6d9e6e44dcccd9e3f37d" kindref="member">OPERATION_PROTOO</ref>(BIG)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="logic_8h_1ac5ae4c3aa3ac6d9e6e44dcccd9e3f37d" kindref="member">OPERATION_PROTOO</ref>(EQUAL)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1ad90808034d12bb9206675ca393c44c2c" kindref="member">isFalse</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1a410b71aa57c657afc46e689c2088a859" kindref="member">isEqual</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1a738a6890d1461a8404eb031c24fd04d3" kindref="member">isSmall</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1aabc31e7c235c86bd90177370ec66e7de" kindref="member">isBig</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1a44b1abc60f9c35e93958b66fa4d70380" kindref="member">ifThenElse</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1a185849a7db34bc74c0404230e3a3b1a3" kindref="member">logicalAnd</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1a8fac8afc7d646088b511fc0b93fd514e" kindref="member">logicalOr</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1af07e7691043d3b497bf5cd5e14b687cc" kindref="member">logicalGreater</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logic_8h_1a6f28ee55cd5fc141581de8957675686a" kindref="member">logicalLess</ref>(<ref refid="structSTCK" kindref="compound">STCK</ref>*<sp/>stack,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="logic.h"/>
  </compounddef>
</doxygen>
